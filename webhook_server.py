import telebot
from flask import Flask, request
import hmac
import hashlib
import base64
from urllib.parse import urlencode

from config import BOT_TOKEN, COURSES, CHANNELS, MERCHANT_ACCOUNT, MERCHANT_SECRET_KEY

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

import telebot
bot = telebot.TeleBot("—Ç–≤—ñ–π_—Ç–æ–∫–µ–Ω")
bot.remove_webhook()
bot.set_webhook("https://telegram-payment-bot-v0hn.onrender.com/webhook")


# –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üìö –ö—É—Ä—Å–∏', '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == 'üìö –ö—É—Ä—Å–∏')
def show_courses(message):
    markup = telebot.types.InlineKeyboardMarkup()
    for cid, course in COURSES.items():
        markup.add(telebot.types.InlineKeyboardButton(course['name'], callback_data=f"select_{cid}"))
    bot.send_message(message.chat.id, "üìò –î–æ—Å—Ç—É–ø–Ω—ñ –∫—É—Ä—Å–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_"))
def course_menu(call):
    cid = call.data.split("_")[1]
    course = COURSES[cid]
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ", callback_data=f"info_{cid}"),
        telebot.types.InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏", callback_data=f"buy_{cid}"),
        telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"üìò {course['name']}",
                          reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("info_"))
def course_info(call):
    cid = call.data.split("_")[1]
    course = COURSES[cid]
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id,
                     f"*{course['name']}*\n\n{course['description']}",
                     parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "back")
def back_to_courses(call):
    show_courses(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def course_buy(call):
    cid = call.data.split("_")[1]
    course = COURSES[cid]

    if course['price'] == 0:
        handle_successful_payment(call.message.chat.id, cid)
        return

    order_ref = f"order_{call.message.chat.id}_{cid}"
    data = {
        "merchantAccount": MERCHANT_ACCOUNT,
        "merchantDomainName": "test.com",
        "orderReference": order_ref,
        "orderDate": 1699999999,
        "amount": course['price'],
        "currency": "UAH",
        "productName": [course['name']],
        "productCount": [1],
        "productPrice": [course['price']],
        "clientAccountId": str(call.message.chat.id),
        "returnUrl": "https://t.me/your_bot"
    }

    keys = [
        MERCHANT_ACCOUNT, "test.com", order_ref, "1699999999",
        str(course['price']), "UAH", course['name'], "1", str(course['price'])
    ]
    sign_str = ";".join(keys)
    sign = base64.b64encode(hmac.new(MERCHANT_SECRET_KEY.encode(), sign_str.encode(), hashlib.md5).digest()).decode()
    data['merchantSignature'] = sign

    pay_link = "https://secure.wayforpay.com/pay?" + urlencode(data, doseq=True)

    bot.send_message(call.message.chat.id,
                     f"üí≥ –©–æ–± –∫—É–ø–∏—Ç–∏ {course['name']}, —Å–ø–ª–∞—Ç–∏ {course['price']} –≥—Ä–Ω:\n{pay_link}\n\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –±–æ—Ç –≤–∏–¥–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø.")

def handle_successful_payment(user_id, course_id):
    try:
        chat_id = CHANNELS.get(course_id)
        if not chat_id:
            bot.send_message(user_id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É.")
            return
        invite = bot.create_chat_invite_link(
            chat_id=chat_id,
            member_limit=1,
            creates_join_request=False
        )
        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\nüîó –û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{invite.invite_link}")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ –¥–æ—Å—Ç—É–ø—É:\n{e}")

# === –í–ê–ñ–õ–ò–í–û: webhook endpoint ===
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
        return "ok", 200

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
